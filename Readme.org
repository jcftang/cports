#+TITLE: cports - TCHPC fork
#+EMAIL: jtang@tchpc.tcd.ie,darach@tchpc.tcd.ie
#+AUTHOR: Jimmy Tang, Darach Golden

* Why fork cports
 - Needed more than just one version of gcc, intel, pgi builds of
   software
 - Needed more control with being able to add packages
 - Needed more variables put into the modulefiles
 - Needed repeatable and documented methods of installing libraries
   and applications
 - Didn't care too much about generating portable objects, and since
   it's dervived from a derived piece of work it just makes life
   easier.
 - Why not use Gentoo, NetBSD ports, packaging system XYZ?
   - most of the other systems are not as easily hackable as just
     makefiles
   - don't allow multiple verisons of software installed
 - Wanted to extend the modulefile generation targets to include these
   variables
  - INCLUDE_PATH 
  - CPLUS_INCLUDE_PATH 
  - C_INCLUDE_PATH 
  - LD_LIBRARY_PATH
  - LIBRARY_PATH
  - LD_RUN_PATH
  - PKG_CONFIG_PATH
  - PYTHONPATH (this needs tweaking)
  - INSERT_MODULEFILE_CONFLICTS (conflict or not?)
  - MODULEFILE_CONFLICTS (conflict package with itself)
  - DO_RUN_TESTS (testing of packages)
* The upstream authors
  - mpkg - http://staff.e.kth.se/mpkg/index.html
  - cports - http://www.caoslinux.org/ and http://caoswiki.infiscale.org/
* The current authors
 - Mainly staff from TCHPC
   - The time is paid for by eINIS, HPCE2, OIP and maybe one or two
     other projects that may be benefitting from the results of this
     build/package system.
* What cports doesn't do 
 - It doesn't generate portable binaries
 - Provide good documentation on the modifications TCHPC has made
 - Support for people who use this :)
 - Dependancy and conflict checking of the packages, the admin who is
   writing the package will need to do this
 - Work with non-gnu based tools (it's a fork and the original authors
   used and based everything on gnu make etc...)
* Requirements
** Required software
 - gnu make
 - gcc, gfortran (and basic devel, compile tools etc...)
 - wget
 - environment-modules

you can do a "make check-environment" to see if you meet the basic
requirements.

** Required devel packages/software if you wish to build X11 programs

This list was compiled from a SL55 machine

freeglut-devel
libICE-devel
libSM-devel
libX11-devel
libXau-devel
libXdmcp-devel
libXext-devel
libXft-devel
libXmu-devel
libXp-devel
libXpm-devel
libXrender-devel
libXt-devel
mesa-libGL-devel
xorg-x11-proto-devel

* Installation and configuration
  - Unpack cports-?.tar.bz2 to somewhere (I usually put it into ${HOME}/develop/cports)
  - Configure cports by creating either /etc/mpkg.mk or
    ${HOME}/.mpkg.mk see the example in doc/examples/dot.mpkg.mk
  - Configure environment modules either at the system level or in
    your own home directory in ${HOME}/privatemodules/cports see
    doc/examples/privatemodules.cports make sure the paths in here
    correspond to the MODULEDIR variable in /etc/mpkg.mk or
    ${HOME}.mpkg.mk. Look in cports/mk/gnu.def.mk for some default
    options that you can override and or set.
  - cd into *cports/scripts* and run the *distro.guess* script, if it
    outputs 'unknown.*' then add a new check for your distro. This
    step isn't strictly needed, but it does provide your installed
    target with some useful information.
  - cd into *cports/packages/bootstrap/1.0* and type make install,
    this will try and install the basic packages needed to build the
    rest of the system
** proxies
   - many people have a http_proxy variable set in their shell config.
     However make installs often fail on ftp download attempts. So you
     should set an ftp_proxy variable as well.  For example,
     ftp_proxy=http://proxy.yourdomain.ie:80.  This works in our
     setup. Yours may be different. Some packages even require that a
     https_proxy variable be set
     (e.g. ,https_proxy=https://proxy.yourdomain.ie:80)

* Usage
 - load up your cports module so that cports can see its own generated
   module files. 
   - the best thing to do is to do a *module initadd dot cports* so
     everytime you login/open a new shell you will have the cports
     environment available to you.
 - To install packages you cd into the
   cports/packages/PACKAGENAME/VERSION that you want, then just type
   *make install*
 - If you want to use a different compiler e.g. do *make install
   COMPILERS=intel* this assumes that you have the intel compilers in
   your path.
** Available COMPILERS
By default COMPILERS=gnu which means it defaults to the system gnu c
compilers (at least version 4 where gfortran is available). This all
assumes that the compilers are already in your path.
*** The default compilers
 - COMPILERS=intel - system version of intel compilers
 - COMPILERS=pathscale - system version of pathscale compilers
 - COMPILERS=pgi - system version of portland compilers
 - COMPILERS=open64 - system version of open64 compilers
*** Accessing different versions of gnu compilers
For example if you want to vary between the gnu compiler versions
4.1.2, 4.4.0, 4.5.0 etc... you will first need to install the
compilers from the cports system. Then manually load up the
gcc/VERSION compiler with the module utility. To then compile things
you will need to set the COMPILERS variable to hint cports to create
the correct installation directory structures and modulefiles.

Support variables currently available (subject to changes)

  - COMPILERS=open644.2.3
  - COMPILERS=gnu4.5.0
  - COMPILERS=gnu4.4.4
  - COMPILERS=gnu4.4.0

Setting the COMPILERS variable tags things correctly in the
installations. More compilers can be added by editting gnu.local.mk
This method of tagging things isn't straightforward to understand but
it at least provides a way of systematically creating installations.

* Systems tested on
 - ScientificLinux 5.x (64bit)
 - ScientificLinux 5.x (32bit)
** Systems that bootstrap works on, but not fully tested
 - ScientificLinux 4.x (32bit)
   - not recommended to run in this environment unless necessary
   - need to redefine F77 to use g77 instead if you need numerical packages to work
 - Debian 5.x (64bit)

* Table of apps that require specific compilers 
The reference compiler is gcc 4.1.2, we assume all apps compile with
gcc 4.1.2 unless otherwise stated

| App           | gcc 4.3.2 | gcc 4.5.1 |
|---------------+-----------+-----------|
| stressapptest |           | x         |
| RDKit         | x         |           |
| abyss         |           | x         |
* Table of apps that fail to build on certain systems
| App    | debian5.0 | sl5 |
|--------+-----------+-----|
| open64 | x         |     | 

* Changelog - OLD
** Fork of cports from caoslinux, which in turn is a fork of mpkg
** Fix up modulefile naming convention
** Fix up current target to add symlink to modulefile as well
*** reverted the linking to modulefile, it breaks things
*** also added uncurrent target
** Added open64 COMPILERS option
** Added F90 variables, to make sure a fortran90 compiler is selected when needed
** Extended the modulefile generation targets to include these variables
  - INCLUDE_PATH
  - CPLUS_INCLUDE_PATH
  - C_INCLUDE_PATH
  - LD_LIBRARY_PATH
  - LIBRARY_PATH
  - LD_RUN_PATH
  - PKG_CONFIG_PATH
  - PYTHONPATH
** New packages that TCHPC finds useful
** Added R modules in the same style the perl modules for convenience

