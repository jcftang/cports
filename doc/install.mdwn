Once you have met the [[requirements]] continue with the following.

### Installation and configuration

  - Unpack cports-?.tar.bz2 to somewhere (I usually put it into
    ${HOME}/develop/cports)
  - run the ./configure.sh script to check if you have the basic
    requirements installed, this configure script will also setup a
    default install prefix for the programs to be installed from
    cports.
    - e.g. you can do *./configure.sh --prefix=/tmp/cports* this will
      configure cports to install anything built from cports into
      */tmp/cports*. The configure script will also generate a sample
      module file for you to copy into your global modulefile
      directory.
  - Optional - Do more configuring of cports by editing
     ${PREFIX}/mk-conf/config.mk
  - Configure environment modules either at the system level or in
    your own home directory in ${HOME}/privatemodules/cports see
    ${PREFIX}/cports.modulefile cports make sure the paths in here
    correspond to the MODULEDIR variable in
    ${PREFIX}/mk-conf/config.mk. Look in cports/mk/gnu.def.mk or
    cports/mk/config.mk for some default options that you can override
    and or set. Or just copy the *cports.modulefile* to your
    modulefile directory.
  - cd into *cports/scripts* and run the *distro.guess* script, if it
    outputs 'unknown.*' then add a new check for your distro. This
    step isn't strictly needed, but it does provide your installed
    target with some useful information.
  - cd into *cports/packages/bootstrap/1.0* and type *make install*,
    this will try and install the basic packages needed to build the
    rest of the system.
  - cd into *cports/packages/bootstrap/2.0* and type *make do-cleaz*
    and *make install* to get gettext and libiconv to behave
    correctly.

### Proxies

   - many people have a `http_proxy` variable set in their shell config.
     However make installs often fail on ftp download attempts. So you
     should set an `ftp_proxy` variable as well.  For example, 
     `ftp_proxy=http://proxy.yourdomain.ie:80`.  This works in our
     setup. Yours may be different. Some packages even require that a
     `https_proxy` variable be set 
     (e.g. `https_proxy=https://proxy.yourdomain.ie:80`)

Once it is installed you will want to read the basic [[usage]] page.

### Notes

   - Scientific Linux 5. Requires /usr/sbin and /sbin to be in your 
     $PATH for running configure.sh

     export PATH=$PATH:/usr/sbin/:/sbin/


