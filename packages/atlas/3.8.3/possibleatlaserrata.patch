diff --git a/atlas-3.8.3.orig/src/blas/gemm/ATL_cmmJITcp.c b/atlas-3.8.3.patched/src/blas/gemm/ATL_cmmJITcp.c
index f0e87cd..ada2fe9 100644
--- a/atlas-3.8.3.orig/src/blas/gemm/ATL_cmmJITcp.c
+++ b/atlas-3.8.3.patched/src/blas/gemm/ATL_cmmJITcp.c
@@ -268,7 +268,7 @@ static void Mjoin(PATL,mmK)
    {
       NBmm0 = NBmm1 = NBmmX = Mjoin(PATLU,pKBmm);
       if (SCALAR_IS_ZERO(beta))
-         Mjoin(PATL,gezero)(M, N, C, ldc);
+      { Mjoin(PATLU,gezero)(M, N, pC, ldpc); Mjoin(PATLU,gezero)(M, N, pC+ipc, ldpc); }
    }
    if (nblk)
    {
diff --git a/atlas-3.8.3.orig/src/blas/gemm/ATL_gereal2cplx.c b/atlas-3.8.3.patched/src/blas/gemm/ATL_gereal2cplx.c
index c334cb5..8790339 100644
--- a/atlas-3.8.3.orig/src/blas/gemm/ATL_gereal2cplx.c
+++ b/atlas-3.8.3.patched/src/blas/gemm/ATL_gereal2cplx.c
@@ -43,7 +43,53 @@ void Mjoin(PATL,gereal2cplx)
    const int ldc2 = (ldc-M)<<1;
    int i, j;
 
-   if (ialp == ATL_rzero && ibet == ATL_rzero)
+/*
+ * Cannot read C if BETA is 0
+ */
+   if (rbet == ATL_rzero && ibet == ATL_rzero)
+   {
+      if (ialp == ATL_rzero)  /* alpha is a real number */
+      {
+         if (ralp == ATL_rone) /* alpha = 1.0 */
+         {
+            for (j=0; j < N; j++, R += ldr, I += ldi, C += ldc2)
+            {
+               for (i=0; i < M; i++, C += 2)
+               {
+                  *C = R[i];
+                  C[1] = I[i];
+               }
+            }
+         }
+         else
+         {
+            for (j=0; j < N; j++, R += ldr, I += ldi, C += ldc2)
+            {
+               for (i=0; i < M; i++, C += 2)
+               {
+                  *C = ralp * R[i];
+                  C[1] = ralp * I[i];
+               }
+            }
+         }
+      }
+      else                   /* alpha is a complex number */
+      {
+         for (j=0; j < N; j++, R += ldr, I += ldi, C += ldc2)
+         {
+            for (i=0; i < M; i++, C += 2)
+            {
+               ra = R[i]; ia = I[i];
+               C[0] = ralp * ra - ialp * ia;
+               C[1] = ralp * ia + ialp * ra;
+            }
+         }
+      }
+   }
+/*
+ * If alpha and beta are both real numbers
+ */
+   else if (ialp == ATL_rzero && ibet == ATL_rzero)
    {
       if (ralp == ATL_rone && rbet == ATL_rone)
       {
diff --git a/atlas-3.8.3.orig/tune/blas/gemm/CASES/ATL_smm14x1x84_sseCU.c b/atlas-3.8.3.patched/tune/blas/gemm/CASES/ATL_smm14x1x84_sseCU.c
index e4f3f9d..ba8cb2c 100644
--- a/atlas-3.8.3.orig/tune/blas/gemm/CASES/ATL_smm14x1x84_sseCU.c
+++ b/atlas-3.8.3.patched/tune/blas/gemm/CASES/ATL_smm14x1x84_sseCU.c
@@ -27,6 +27,13 @@
  * POSSIBILITY OF SUCH DAMAGE.
  *
  */
+#if KB > 84
+   #error "KB cannot exceed 84!"
+#endif
+#if (KB/4)*4 != KB
+   #error "KB must be a multiple of 4!"
+#endif
+
 #ifndef ATL_GAS_x8664
    #error "This kernel requires x86-64 assembly!"
 #endif
diff --git a/atlas-3.8.3.orig/tune/blas/level1/scalsrch.c b/atlas-3.8.3.patched/tune/blas/level1/scalsrch.c
index 09872c6..ac0ed15 100644
--- a/atlas-3.8.3.orig/tune/blas/level1/scalsrch.c
+++ b/atlas-3.8.3.patched/tune/blas/level1/scalsrch.c
@@ -747,7 +747,7 @@ void GenMainRout(char pre, int n, int *ix, int *iy, int *ia, int *ib,
 /*
  * Handle all special alpha cases
  */
-   fprintf(fpout, "%sif ( SCALAR_IS_ZERO(alpha) )\n", spc);
+/*   fprintf(fpout, "%sif ( SCALAR_IS_ZERO(alpha) )\n", spc);
    fprintf(fpout, "%s{\n", spc);
    if (pre == 'c' || pre == 'z')
    {
@@ -756,7 +756,7 @@ void GenMainRout(char pre, int n, int *ix, int *iy, int *ia, int *ib,
    }
    else fprintf(fpout, "%s   Mjoin(PATL,set)(N, ATL_rzero, X, incx);\n", spc);
    fprintf(fpout, "%s   return;\n", spc);
-   fprintf(fpout, "%s}\n", spc);
+   fprintf(fpout, "%s}\n", spc); */
    GenAlphCase(pre, spc, fpout, 1, n, ix, iy, ia, ib);
    GenAlphCase(pre, spc, fpout, -1, n, ix, iy, ia, ib);
    if (pre == 'c' || pre == 'z')
