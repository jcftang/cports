diff --git a/INSTALL b/INSTALL
index 5966dde..81ac702 100644
--- a/INSTALL
+++ b/INSTALL
@@ -2,7 +2,16 @@
 HOW TO INSTALL git-subtree
 ==========================
 
-Copy the file 'git-subtree.sh' to /usr/local/bin/git-subtree.
+You simply need to copy the file 'git-subtree.sh' to where
+the rest of the git scripts are stored. 
+
+From the Git bash window just run:
+
+install.sh 
+
+Or if you have the full Cygwin installed, you can use make:
+
+make install
 
 That will make a 'git subtree' (note: space instead of dash) command
 available.  See the file git-subtree.txt for more.
diff --git a/git-subtree.sh b/git-subtree.sh
index 11cda9e..ce94d36 100755
--- a/git-subtree.sh
+++ b/git-subtree.sh
@@ -11,6 +11,7 @@ OPTS_SPEC="\
 git subtree add   --prefix=<prefix> <commit>
 git subtree merge --prefix=<prefix> <commit>
 git subtree pull  --prefix=<prefix> <repository> <refspec...>
+git subtree push  --prefix=<prefix> <repository> <refspec...>
 git subtree split --prefix=<prefix> <commit...>
 --
 h,help        show the help
@@ -24,12 +25,14 @@ b,branch=     create a new branch from the split subtree
 ignore-joins  ignore prior --rejoin commits
 onto=         try connecting new tree to an existing one
 rejoin        merge the new branch back into HEAD
- options for 'add', 'merge', and 'pull'
+ options for 'add', 'merge', 'pull' and 'push'
 squash        merge subtree changes as a single commit
 "
-eval $(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)
-PATH=$(git --exec-path):$PATH
+eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"
+
+PATH=$PATH:$(git --exec-path)
 . git-sh-setup
+
 require_work_tree
 
 quiet=
@@ -98,16 +101,24 @@ command="$1"
 shift
 case "$command" in
 	add|merge|pull) default= ;;
-	split) default="--default HEAD" ;;
+	split|push) default="--default HEAD" ;;
 	*) die "Unknown command '$command'" ;;
 esac
 
 if [ -z "$prefix" ]; then
 	die "You must provide the --prefix option."
 fi
+
+case "$command" in
+	add) [ -e "$prefix" ] && 
+		die "prefix '$prefix' already exists." ;;
+	*)   [ -e "$prefix" ] || 
+		die "'$prefix' does not exist; use 'git subtree add'" ;;
+esac
+
 dir="$(dirname "$prefix/.")"
 
-if [ "$command" != "pull" ]; then
+if [ "$command" != "pull" -a "$command" != "add" -a "$command" != "push" ]; then
 	revs=$(git rev-parse $default --revs-only "$@") || exit $?
 	dirs="$(git rev-parse --no-revs --no-flags "$@")" || exit $?
 	if [ -n "$dirs" ]; then
@@ -244,6 +255,7 @@ find_existing_splits()
 				if [ -n "$main" -a -n "$sub" ]; then
 					debug "  Prior: $main -> $sub"
 					cache_set $main $sub
+					cache_set $sub $sub
 					try_remove_previous "$main"
 					try_remove_previous "$sub"
 				fi
@@ -442,10 +454,10 @@ copy_or_skip()
 
 ensure_clean()
 {
-	if ! git diff-index HEAD --exit-code --quiet; then
+	if ! git diff-index HEAD --exit-code --quiet 2>&1; then
 		die "Working tree has modifications.  Cannot add."
 	fi
-	if ! git diff-index --cached HEAD --exit-code --quiet; then
+	if ! git diff-index --cached HEAD --exit-code --quiet 2>&1; then
 		die "Index has modifications.  Cannot add."
 	fi
 }
@@ -455,12 +467,34 @@ cmd_add()
 	if [ -e "$dir" ]; then
 		die "'$dir' already exists.  Cannot add."
 	fi
+
 	ensure_clean
 	
-	set -- $revs
-	if [ $# -ne 1 ]; then
-		die "You must provide exactly one revision.  Got: '$revs'"
+	if [ $# -eq 1 ]; then
+		"cmd_add_commit" "$@"
+	elif [ $# -eq 2 ]; then
+		"cmd_add_repository" "$@"
+	else
+	    say "error: parameters were '$@'"
+	    die "Provide either a refspec or a repository and refspec."
 	fi
+}
+
+cmd_add_repository()
+{
+	echo "git fetch" "$@"
+	repository=$1
+	refspec=$2
+	git fetch "$@" || exit $?
+	revs=FETCH_HEAD
+	set -- $revs
+	cmd_add_commit "$@"
+}
+
+cmd_add_commit()
+{
+	revs=$(git rev-parse $default --revs-only "$@") || exit $?
+	set -- $revs
 	rev="$1"
 	
 	debug "Adding $dir as '$rev'..."
@@ -538,7 +572,9 @@ cmd_split()
 		# ugly.  is there no better way to tell if this is a subtree
 		# vs. a mainline commit?  Does it matter?
 		if [ -z $tree ]; then
-			cache_set $rev $rev
+			if [ -n "$newparents" ]; then
+				cache_set $rev $rev
+			fi
 			continue
 		fi
 
@@ -578,6 +614,7 @@ cmd_split()
 
 cmd_merge()
 {
+	revs=$(git rev-parse $default --revs-only "$@") || exit $?
 	ensure_clean
 	
 	set -- $revs
@@ -602,8 +639,21 @@ cmd_merge()
 		debug "New squash commit: $new"
 		rev="$new"
 	fi
-	
-	git merge -s subtree --message="$message" $rev
+
+	version=$(git version)
+	if [ "$version" \< "git version 1.7" ]; then
+		if [ -n "$message" ]; then
+			git merge -s subtree --message="$message" $rev
+		else
+			git merge -s subtree $rev
+		fi
+	else
+		if [ -n "$message" ]; then
+			git merge -Xsubtree="$prefix" --message="$message" $rev
+		else
+			git merge -Xsubtree="$prefix" $rev
+		fi
+	fi
 }
 
 cmd_pull()
@@ -611,7 +661,23 @@ cmd_pull()
 	ensure_clean
 	git fetch "$@" || exit $?
 	revs=FETCH_HEAD
-	cmd_merge
+	set -- $revs
+	cmd_merge "$@"
+}
+
+cmd_push()
+{
+	if [ $# -ne 2 ]; then
+	    die "You must provide <repository> <refspec>"
+	fi
+	if [ -e "$dir" ]; then
+	    repository=$1
+	    refspec=$2
+	    echo "git push using: " $repository $refspec
+	    git push $repository $(git subtree split --prefix=$prefix):refs/heads/$refspec
+	else
+	    die "'$dir' must already exist. Try 'git subtree add'."
+	fi
 }
 
 "cmd_$command" "$@"
diff --git a/git-subtree.txt b/git-subtree.txt
index 9b2d48e..a30293d 100644
--- a/git-subtree.txt
+++ b/git-subtree.txt
@@ -9,15 +9,17 @@ git-subtree - add, merge, and split subprojects stored in subtrees
 SYNOPSIS
 --------
 [verse]
-'git subtree' add   --prefix=<prefix> <commit>
-'git subtree' merge --prefix=<prefix> <commit>
+'git subtree' add   --prefix=<prefix> <repository> <refspec...>
 'git subtree' pull  --prefix=<prefix> <repository> <refspec...>
-'git subtree' split --prefix=<prefix> <commit...>
+'git subtree' push  --prefix=<prefix> <repository> <refspec...>
+'git subtree' add   --prefix=<prefix> <refspec>
+'git subtree' merge --prefix=<prefix> <refspec>
+'git subtree' split --prefix=<prefix> <refspec...>
          
 
 DESCRIPTION
 -----------
-git subtree allows you to include an subproject in your
+git subtree allows you to include a subproject in your
 own repository as a subdirectory, optionally including the
 subproject's entire history. For example, you could
 include the source code for a library as a subdirectory of your
@@ -60,11 +62,11 @@ COMMANDS
 --------
 add::
 	Create the <prefix> subtree by importing its contents
-	from the given commit.  A new commit is created
-	automatically, joining the imported project's history
-	with your own.  With '--squash', imports only a single
-	commit from the subproject, rather than its entire
-	history.
+	from the given <refspec> or <repository> and remote <refspec>.
+	A new commit is created	automatically, joining the imported
+	project's history with your own.  With '--squash', imports
+	only a single commit from the subproject, rather than its
+	entire history.
 
 merge::
 	Merge recent changes up to <commit> into the <prefix>
@@ -84,6 +86,12 @@ pull::
 	Exactly like 'merge', but parallels 'git pull' in that
 	it fetches the given commit from the specified remote
 	repository.
+	
+push::
+	Does a 'split' (see above) using the <prefix> supplied
+	and then does a 'git push' to push the result to the 
+	repository and refspec. This can be used to push your
+	subtree to different branches of the remote repository.
 
 split::
 	Extract a new, synthetic project history from the
@@ -223,9 +231,29 @@ OPTIONS FOR split
 	subproject's history to be part of your project anyway.
 
 
-EXAMPLES
---------
-Let's use the repository for the git source code as an example. 
+EXAMPLE 1
+---------
+Let's assume that you have a local repository that you would like
+to add an external vendor library to. In this case we will add the
+git-subtree repository as a subdirectory of your already existing
+git-extensions repository in ~/git-extensions/:
+
+	$ git subtree add --prefix=git-subtree --squash \
+		git://github.com/apenwarr/git-subtree.git master
+
+'master' needs to be a valid remote ref and can be a different branch
+name
+
+You can omit the --squash flag, but doing so will increase the number
+of commits that are incldued in your local repository.
+
+We now have a ~/git-extensions/git-subtree directory containing code
+from the master branch of git://github.com/apenwarr/git-subtree.git
+in our git-extensions repository.
+
+EXAMPLE 2
+---------
+Let's use the repository for the git source code as an example.
 First, get your own copy of the git.git repository:
 
 	$ git clone git://git.kernel.org/pub/scm/git/git.git test-git
@@ -284,6 +312,23 @@ the standard gitweb:
 
 	git log gitweb-latest..$(git subtree split --prefix=gitweb)
 
+EXAMPLE 3
+---------
+Suppose you have a source directory with many files and
+subdirectories, and you want to extract the lib directory to its own
+git project. Here's a short way to do it:
+
+First, make the new repository wherever you want:
+       <go to the new location>
+       git init --bare
+
+Back in your original directory:
+       git subtree split --prefix=lib --annotate="(split)" -b split
+
+Then push the new branch onto the new empty repository:
+        git push <new-repo> split:master
+
+
 
 AUTHOR
 ------
diff --git a/install.sh b/install.sh
new file mode 100644
index 0000000..1f87a62
--- /dev/null
+++ b/install.sh
@@ -0,0 +1,2 @@
+# copy Git to where the rest of the Git scripts are found.
+cp git-subtree.sh "$(git --exec-path)"/git-subtree
\ No newline at end of file
diff --git a/test.sh b/test.sh
index cfe3a3c..45237c3 100755
--- a/test.sh
+++ b/test.sh
@@ -21,6 +21,19 @@ check()
 	fi
 }
 
+check_not()
+{
+	echo
+	echo "check: NOT " "$@"
+	if "$@"; then
+		echo FAILED
+		exit 1
+	else
+		echo ok
+		return 0
+	fi
+}
+
 check_equal()
 {
 	echo
@@ -60,7 +73,7 @@ undo()
 
 last_commit_message()
 {
-	git log --format=%s -1
+	git log --pretty=format:%s -1
 }
 
 rm -rf mainline subproj
@@ -94,6 +107,8 @@ git fetch ../subproj sub1
 git branch sub1 FETCH_HEAD
 
 # check if --message works for add
+check_not git subtree merge --prefix=subdir sub1
+check_not git subtree pull --prefix=subdir ../subproj sub1
 git subtree add --prefix=subdir --message="Added subproject" sub1
 check_equal "$(last_commit_message)" "Added subproject"
 undo
@@ -140,6 +155,15 @@ git subtree merge --prefix=subdir FETCH_HEAD
 git branch pre-split
 check_equal "$(last_commit_message)" "Merge commit '$(git rev-parse sub2)' into mainline"
 
+# Check that prefix argument is required for split (exits with warning and exit status = 1)
+! result=$(git subtree split 2>&1)
+check_equal "You must provide the --prefix option." "$result"
+
+# Check that the <prefix> exists for a split.
+! result=$(git subtree split --prefix=non-existent-directory 2>&1)
+check_equal "'non-existent-directory' does not exist; use 'git subtree add'" \
+  "$result"
+
 # check if --message works for split+rejoin
 spl1=$(git subtree split --annotate='*' --prefix subdir --onto FETCH_HEAD --message "Split & rejoin" --rejoin)
 echo "spl1={$spl1}"
@@ -268,8 +292,17 @@ git subtree split --prefix subdir --branch mainsub4
 # at this point, the new commit's parent should be sub3
 # if it's not, something went wrong (the "newparent" of "master~" commit should have been sub3,
 # but it wasn't, because it's cache was not set to itself)
-check_equal "$(git log --format=%P -1 mainsub4)" "$(git rev-parse sub3)"
+check_equal "$(git log --pretty=format:%P -1 mainsub4)" "$(git rev-parse sub3)"
+
+mkdir subdir2
+create subdir2/main-sub5
+git commit -m "main-sub5"
+git subtree split --prefix subdir2 --branch mainsub5
 
+# also test that we still can split out an entirely new subtree
+# if the parent of the first commit in the tree isn't empty,
+# then the new subtree has accidently been attached to something
+check_equal "$(git log --pretty=format:%P -1 mainsub5)" ""
 
 
 # make sure no patch changes more than one file.  The original set of commits
